<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Class Project</name>
    </assembly>
    <members>
        <member name="T:Class_Project.Conversion">
            <summary>
            The <c>Conversion</c> class.
            Contains all methods for parsing stored data into a <c>Ticket</c> object.
            </summary>
        </member>
        <member name="M:Class_Project.Conversion.ToTicketEntity(Class_Project.Ticket)">
            <summary>
            Converts a <c>Ticket</c> to a <c>TicketEntity</c> to be stored in a database.
            </summary>
            <param name="ticket">The <c>Ticket</c> to be stored.</param>
            <returns>The store-able <c>TicketEntity</c></returns>
        </member>
        <member name="M:Class_Project.Conversion.StringToInt(System.String)">
            <summary>
            Parse a <c>string</c> to an <c>int</c>. 
            </summary>
            <param name="s">The <c>string</c> to be parsed into and <c>int</c>.</param>
            <returns>An <c>int</c> parsed from a <c>string</c>.</returns>
        </member>
        <member name="M:Class_Project.Conversion.StringToStatus(System.String)">
            <summary>
            Parse a <c>string</c> to a <c>Status</c>.
            </summary>
            <param name="statusString">The <c>string</c> to be parsed.</param>
            <returns>A <c>Status</c>.</returns>
        </member>
        <member name="M:Class_Project.Conversion.StringToPriority(System.String)">
            <summary>
            Parse a <c>string</c> to a <c>Priority</c>.
            </summary>
            <param name="priorityString">The <c>string</c> to be parsed.</param>
            <returns>A <c>Priority</c>.</returns>
        </member>
        <member name="T:Class_Project.CsvTickets">
            <summary>
            The abstract <c>CsvTickets</c> class.
            Contains a <c>List</c> of stored tickets in <c>StoredTickets</c>.
            </summary>
        </member>
        <member name="M:Class_Project.CsvTickets.UpdateStoredTickets(System.Collections.Generic.List{Class_Project.Ticket})">
            <summary>
            Takes a <c>List</c> of <c>Ticket</c> objects and adds them to the <c>StoredTickets</c> list.
            Will replace matching IDs in <c>StoredTickets</c> before appending new <c>Ticket</c> objects.
            </summary>
            <param name="tickets"></param>
        </member>
        <member name="T:Class_Project.CsvIn">
            <inheritdoc cref="T:Class_Project.IInput" />
            <summary>
            The <c>CSVIn</c> class.
            Implements the <c>IInput</c> interface.
            Used to load stored tickets from a CSV file.
            </summary>
        </member>
        <member name="M:Class_Project.CsvIn.#ctor(System.String)">
            <summary>
            Constructor for <c>CSVIn</c>.
            Requires the name of the file to be opened as an argument.
            </summary>
            <param name="fileName">The name of the file to be opened.</param>
        </member>
        <member name="M:Class_Project.CsvIn.SetFileName(System.String)">
            <summary>
            Set <c>fileName</c>.
            </summary>
            <param name="fileName">The name of the file to be opened.</param>
        </member>
        <member name="M:Class_Project.CsvIn.GetStoredTickets">
            <inheritdoc />
        </member>
        <member name="M:Class_Project.CsvIn.GetMaxId">
            <inheritdoc />
        </member>
        <member name="M:Class_Project.CsvIn.FindId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Class_Project.CsvOut">
            <inheritdoc cref="T:Class_Project.IOutput" />
            <summary>
            The <c>CSVOut</c> class.
            Extends the <c>CsvTickets</c> class.
            Implements the <c>IOutput</c> interface.
            Used to store tickets in a CSV file.
            </summary>
            <see cref="T:Class_Project.CsvTickets"/>
            <seealso cref="T:Class_Project.IOutput"/>
        </member>
        <member name="M:Class_Project.CsvOut.#ctor(System.String)">
            <summary>
            Output <c>List</c> of <c>Ticket</c> objects to a csv file.
            </summary>
            <param name="fileName">The name of the file to be written to.</param>
        </member>
        <member name="M:Class_Project.CsvOut.SetFileName(System.String)">
            <summary>
            Set <c>fileName</c>.
            </summary>
            <param name="fileName">The name of the file to be opened.</param>
        </member>
        <member name="M:Class_Project.CsvOut.WriteAll(System.Collections.Generic.List{Class_Project.Ticket})">
            <inheritdoc />
            <summary>
            Write all <c>Ticket</c> objects to the CSV file.
            </summary>
            <param name="tickets">List of all active <c>Ticket</c> objects to be added.</param>
        </member>
        <member name="T:Class_Project.DbIn">
            <inheritdoc />
            <summary>
            The <c>DbIn</c> class.
            Implements the <c>IInput</c> interface.
            Used to read records from a database.
            </summary>
        </member>
        <member name="T:Class_Project.DbOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:Class_Project.DbOut.WriteAll(System.Collections.Generic.List{Class_Project.Ticket})">
            <summary>
            Write all tickets to the database.
            </summary>
            <param name="tickets">List of <c>Tickets</c></param>
        </member>
        <member name="T:Class_Project.IInput">
            <summary>
            The <c>IInput</c> interface.
            provides signatures for methods to query stored tickets.
            </summary>
        </member>
        <member name="M:Class_Project.IInput.GetStoredTickets">
            <summary>
            Get a <c>List</c> of all stored tickets. 
            </summary>
            <returns>A <c>List</c> of all stored tickets.</returns>
        </member>
        <member name="M:Class_Project.IInput.GetMaxId">
            <summary>
            Gets the highest ID stored.
            Used to generate new tickets without reusing IDs.
            </summary>
            <returns>
            The highest ID as an <c>int</c>.
            </returns>
        </member>
        <member name="M:Class_Project.IInput.FindId(System.Int32)">
            <summary>
            Get a <c>Ticket</c> by ID.
            </summary>
            <param name="id">The id of the desired <c>Ticket</c> as an <c>int</c>.</param>
            <returns>The desired <c>Ticket</c>, if found.</returns>
        </member>
        <member name="M:Class_Project.IOutput.WriteAll(System.Collections.Generic.List{Class_Project.Ticket})">
            <summary>
            Write out <c>List</c> of <c>Ticket</c> objects to storage medium.
            </summary>
            <param name="tickets">A <c>List</c> of <c>Ticket</c> objects</param>
        </member>
        <member name="T:Class_Project.TicketFactory">
            <summary>
            The <c>TicketFactory</c> class.
            This class follows a thread-safe singleton pattern.
            To access <c>TicketFactory</c>, call <c>GetTicketFactory(int id)</c>.
            </summary>
        </member>
        <member name="M:Class_Project.TicketFactory.GetTicketFactory(System.Int32)">
            <summary>
            Get the <c>TicketFactory</c> instance.
            When called, the last used <c>ticketId</c> must be passed for a new <c>Ticket</c> object to be generated without conflicting IDs.
            </summary>
            <param name="id">The last used ID.</param>
            <returns>The <c>TicketFactory</c> instance.</returns>
        </member>
        <member name="M:Class_Project.TicketFactory.SetLastId(System.Int32)">
            <summary>
            Set the last used ID.
            If the current value of <c>_lastId</c> is greater than the argument passed, the argument passed is ignored.
            </summary>
            <param name="id">The last ID used to generate a ticket.</param>
        </member>
        <member name="M:Class_Project.TicketFactory.NewTicket(System.Int32,System.String,Class_Project.Status,Class_Project.Priority,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generate a previously created ticket that already has a <c>ticketId</c>.
            </summary>
            <param name="ticketId">The <c>ticketId</c> of the ticket.</param>
            <param name="summary">The <c>summary</c> of the ticket.</param>
            <param name="status">The <c>status</c> of the ticket.</param>
            <param name="priority">The <c>priority</c> of the ticket.</param>
            <param name="submitter">The <c>submitter</c> of the ticket.</param>
            <param name="assigned">The <c>assigned</c> of the ticket.</param>
            <param name="watching">The <c>watching</c> of the ticket.</param>
            <returns>the <c>Ticket</c> object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <c>ticketId</c> is less than the <c>ticketIdFloor</c>.</exception>
        </member>
        <member name="M:Class_Project.TicketFactory.NewTicket(System.String,Class_Project.Status,Class_Project.Priority,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Generate a new ticket with a <c>watching</c> argument.
            </summary>
            <param name="summary">The <c>summary</c> of the ticket.</param>
            <param name="status">The <c>status</c> of the ticket.</param>
            <param name="priority">The <c>priority</c> of the ticket.</param>
            <param name="submitter">The <c>submitter</c> of the ticket.</param>
            <param name="assigned">The <c>assigned</c> of the ticket.</param>
            <param name="watching">The <c>watching</c> of the ticket.</param>
            <returns>the <c>Ticket</c> object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <c>ticketId</c> is less than the <c>ticketIdFloor</c>.</exception>
        </member>
        <member name="M:Class_Project.TicketFactory.NewTicket(System.String,Class_Project.Status,Class_Project.Priority,System.String,System.String)">
            <summary>
            Generate a new ticket without a <c>watching</c> argument.
            The <c>watching</c> property is populated with the submitter.
            </summary>
            <param name="summary">The <c>summary</c> of the ticket.</param>
            <param name="status">The <c>status</c> of the ticket.</param>
            <param name="priority">The <c>priority</c> of the ticket.</param>
            <param name="submitter">The <c>submitter</c> of the ticket.</param>
            <param name="assigned">The <c>assigned</c> of the ticket.</param>
            <returns>the <c>Ticket</c> object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <c>ticketId</c> is less than the <c>ticketIdFloor</c>.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Class_Project.TicketFactory.StringToTicket(System.String,System.String)" -->
    </members>
</doc>
